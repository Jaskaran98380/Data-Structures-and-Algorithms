Problem Statement
Design a data structure to implement deque of size ‘N’. It should support the following operations:
pushFront(X): Inserts an element X in the front of the deque. Returns true if the element is inserted, otherwise false.

pushRear(X): Inserts an element X in the back of the deque. Returns true if the element is inserted, otherwise false.

popFront(): Pops an element from the front of the deque. Returns -1 if the deque is empty, otherwise returns the popped element.

popRear(): Pops an element from the back of the deque. Returns -1 if the deque is empty, otherwise returns the popped element.

getFront(): Returns the first element of the deque. If the deque is empty, it returns -1.

getRear(): Returns the last element of the deque. If the deque is empty, it returns -1.

isEmpty(): Returns true if the deque is empty, otherwise false.

isFull(): Returns true if the deque is full, otherwise false.
Following types of queries denote these operations:
Type 1: for pushFront(X) operation.
Type 2: for pushRear(X) operation.
Type 3: for popFront() operation.
Type 4: for popRear() operation.
Type 5: for getFront() operation.
Type 6: for getRear() operation.
Type 7: for isEmpty() operation.
Type 8: for isFull() operation.
Input Format:
The first line of input contains two space-separated integers ‘N’ and ‘Q’ denoting the size of the deque and the number of queries to be performed, respectively. 

The next ‘Q’ lines specify the type of operation/query to be performed on the data structure.

Each query contains an integer ‘P’ denoting the type of query.

For the query of type 1 and 2, the integer ‘P’ is followed by a single integer ‘X’ denoting the element on which operation is to be performed.

For the queries of type 3 to 8, a single integer ‘P’ is given, denoting the type of query.
Output Format:
For each query, print the output returned after performing the corresponding operation on the data structure. 
Note:
You do not need to print anything, it has already been taken care of. Just implement the given functions.
******************************************

class Deque
{
    int *arr;
    int size;
    int qfront;
    int qrear;
public:
    // Initialize your data structure.
    Deque(int n)
    {
        // Write your code here.
        size=n;
        qfront=-1;
        qrear=-1;
        arr=new int[n];
    }

    // Pushes 'X' in the front of the deque. Returns true if it gets pushed into the deque, and false otherwise.
    bool pushFront(int x)
    {
        // Write your code here.
        if(isFull()){
            return false;
        }
        else if(qfront==-1){
            qfront=0;
            qrear=0;
        }
        else if(qfront==0 && qrear!=size-1){
            qfront=size-1;
        }
        else{
            qfront--;
        }
        arr[qfront]=x;
        return true;
    }

    // Pushes 'X' in the back of the deque. Returns true if it gets pushed into the deque, and false otherwise.
    bool pushRear(int value)
    {
        // Write your code here.
             if((qfront==0 && qrear==size-1) || (qrear==qfront-1)){
            return false;
        }
        else if(qfront==-1){
            qfront=0;
            qrear=0;
        }
        else if(qfront!=0 && qrear==size-1){
            qrear=0;
        }
        else{
            qrear++;
        }
        arr[qrear]=value;
        return true;
    }

    // Pops an element from the front of the deque. Returns -1 if the deque is empty, otherwise returns the popped element.
    int popFront()
    {
        // Write your code here.
              if(qfront==-1){
            return -1;
        }
        int ans =arr[qfront];
           if(qfront==qrear){
            qfront=-1;
            qrear=-1;
        }
        
        else if(qfront == size-1){
            qfront=0;
        }
     
        else{
            qfront++;
        }
        return ans;
    }

    // Pops an element from the back of the deque. Returns -1 if the deque is empty, otherwise returns the popped element.
    int popRear()
    {
        // Write your code here.
        if(isEmpty()){
            return -1;
        }
        int ans=arr[qrear];
        if(qrear==qfront){
            qrear=-1;
            qfront=-1;
        }
        else if(qrear==0){
            qrear=size-1;
        }
        else{
            qrear--;
        }
        return ans;
    }

    // Returns the first element of the deque. If the deque is empty, it returns -1.
    int getFront()
    {
        // Write your code here.
        if(isEmpty()){
            return -1;
        }
        return arr[qfront];
    }

    // Returns the last element of the deque. If the deque is empty, it returns -1.
    int getRear()
    {
        // Write your code here.
           if(isEmpty()){
            return -1;
        }
        return arr[qrear];
        
    }

    // Returns true if the deque is empty. Otherwise returns false.
    bool isEmpty()
    {
        // Write your code here.
        if(qrear==-1){
            return true;
        }
        return false;
    }

    // Returns true if the deque is full. Otherwise returns false.
    bool isFull()
    {
        // Write your code here.
        if((qfront==0 && qrear==size-1) || (qrear==qfront-1)){
            return true;
        }
        return false;
    }
};
