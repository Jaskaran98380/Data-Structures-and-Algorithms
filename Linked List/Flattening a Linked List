Given a Linked List of size N, where every node represents a sub-linked-list and contains two pointers:
(i) a next pointer to the next node,
(ii) a bottom pointer to a linked list where this node is head.
Each of the sub-linked-list is in sorted order.
Flatten the Link List such that all the nodes appear in a single level while maintaining the sorted order. 
Note: The flattened list will be printed using the bottom pointer instead of next pointer.

 

Example 1:

Input:
5 -> 10 -> 19 -> 28
|     |     |     | 
7     20    22   35
|           |     | 
8          50    40
|                 | 
30               45
Output:  5-> 7-> 8- > 10 -> 19-> 20->
22-> 28-> 30-> 35-> 40-> 45-> 50.
Explanation:
The resultant linked lists has every 
node in a single level.
(Note: | represents the bottom pointer.)
 

Example 2:

Input:
5 -> 10 -> 19 -> 28
|          |                
7          22   
|          |                 
8          50 
|                           
30              
Output: 5->7->8->10->19->22->28->30->50
Explanation:
The resultant linked lists has every
node in a single level.

(Note: | represents the bottom pointer.)

******************************************************

/* Node structure  used in the program

struct Node{
	int data;
	struct Node * next;
	struct Node * bottom;
	
	Node(int x){
	    data = x;
	    next = NULL;
	    bottom = NULL;
	}
	
};
*/

/*  Function which returns the  root of 
    the flattened linked list. */
    
Node* merge(Node* &list1, Node* &list2) {
        if(list1==NULL)return list2;
        if(list2==NULL)return list1;
        if(list1->data>list2->data){
            swap(list1,list2);
        }
        Node *res=list1;
        while(list1!=NULL && list2!=NULL){
            Node*temp=NULL;
            while(list1!=NULL && list1->data<=list2->data){
                temp=list1;
                list1=list1->bottom;
            }
            temp->bottom=list2;
            swap(list1,list2);
        }
        return res;
    }
    
Node *flatten(Node *head)
{
   // Your code here
      if(head==NULL || head->next==NULL){
        return head;
    }
    head->next=flatten(head->next);
    head=merge(head,head->next);
    return head;
}

