Given a string s, partition s such that every substring of the partition is a palindrome. Return all possible palindrome partitioning of s.

A palindrome string is a string that reads the same backward as forward.

 

Example 1:

Input: s = "aab"
Output: [["a","a","b"],["aa","b"]]
Example 2:

Input: s = "a"
Output: [["a"]]
***************************
class Solution {
public:
    void func(int ind,string s,vector<string>&ds,vector<vector<string>>&ans){
        if(ind==s.size()){
            ans.push_back(ds);
            return;
        }
        for(int i=ind;i<s.size();i++){
            if(isPalindrome(s,ind,i)){
                ds.push_back(s.substr(ind,i-ind+1));
                func(i+1,s,ds,ans);
                ds.pop_back();
            }
        }}
        bool isPalindrome(string s,int start,int end){
            while(start<=end){
                if(s[start++]!=s[end--]){
                    return false;
                }
            }
            return true;
        }
    
    
    
    vector<vector<string>> partition(string s) {
        vector<vector<string>>ans;
        vector<string>ds;
        func(0,s,ds,ans);
        return ans;
    }
};
