The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.

Given an integer n, return all distinct solutions to the n-queens puzzle. You may return the answer in any order.

Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space, respectively.

 

Example 1:


Input: n = 4
Output: [[".Q..","...Q","Q...","..Q."],["..Q.","Q...","...Q",".Q.."]]
Explanation: There exist two distinct solutions to the 4-queens puzzle as shown above
Example 2:

Input: n = 1
Output: [["Q"]]
****************************
class Solution {
public:
    bool isSafe(int row,int col,vector<string>v,int n){
        for(int i=0;i<=col;i++){
            if(v[row][i]=='Q'){
                return false;
            }
        }
        int duprow=row;
        int dupcol=col;
        while(row>=0 && col>=0){
            if(v[row][col]=='Q'){
                return false;
            }
            row--;
            col--;
        }
        row=duprow;
        col=dupcol;
        while(row<n && col>=0){
            if(v[row][col]=='Q'){
                return false;
            }
            row++;
            col--;
        }
        return true;
    }
    
    void func(int col,vector<string>&v,vector<vector<string>>&ans,int n){
        if(col==n){
            ans.push_back(v);
            return;
        }
        for(int row=0;row<n;row++){
            if(isSafe(row,col,v,n)){
                v[row][col]='Q';
                func(col+1,v,ans,n);
                v[row][col]='.';
            }
        }
    }
    
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>>ans;
        vector<string>v(n);
        string s(n,'.');
        for(int i=0;i<n;i++){
            v[i]=s;
            
        }
        func(0,v,ans,n);
        return ans;
    }
};
