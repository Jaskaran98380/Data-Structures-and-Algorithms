https://www.codingninjas.com/codestudio/problems/ways-to-make-coin-change_630471?source=youtube&campaign=striver_dp_videos&utm_source=youtube&utm_medium=affiliate&utm_campaign=striver_dp_videos&leftPanelTab=0

***********************
//memo

#include<bits/stdc++.h>
long func(int *arr,int ind,int value,vector<vector<long>>&dp){
    if(value==0)return 1;
      if(ind==0){
        if(value%arr[ind]==0)return 1;
        return 0;
      }
    
    if(dp[ind][value]!=-1)return dp[ind][value];
    long notTake=func(arr,ind-1,value,dp);
    long take=0;
    if(arr[ind]<=value)take=func(arr,ind,value-arr[ind],dp);
    return dp[ind][value] = take+notTake;
}

long countWaysToMakeChange(int *denominations, int n, int value)
{
    //Write your code here
    vector<vector<long>>dp(n,vector<long>(value+1,-1));
    return func(denominations,n-1,value,dp);
}

**************************
//tab

#include<bits/stdc++.h>


long countWaysToMakeChange(int *arr, int n, int value)
{
    //Write your code here
    vector<vector<long>>dp(n,vector<long>(value+1,-1));
    for(int i=0;i<=value;i++){
        dp[0][i]= (i%arr[0]==0);
    }
    for(int i=1;i<n;i++){
        for(int j=0;j<=value;j++){
              long notTake=dp[i-1][j];
    long take=0;
    if(arr[i]<=j)take=dp[i][j-arr[i]];
     dp[i][j] = take+notTake;
        }
    }
    return dp[n-1][value];
}

***************************
space optimisation

#include<bits/stdc++.h>


long countWaysToMakeChange(int *arr, int n, int value)
{
    //Write your code here
    vector<long>prev(value+1,0);
    vector<long>curr(value+1,0);
    for(int i=0;i<=value;i++){
        prev[i]= (i%arr[0]==0);
    }
    for(int i=1;i<n;i++){
        for(int j=0;j<=value;j++){
              long notTake=prev[j];
    long take=0;
    if(arr[i]<=j)take=curr[j-arr[i]];
     curr[j] = take+notTake;
        }
        prev=curr;
    }
    return prev[value];
}
