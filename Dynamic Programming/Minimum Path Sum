https://www.codingninjas.com/codestudio/problems/minimum-path-sum_985349?source=youtube&campaign=striver_dp_videos&utm_source=youtube&utm_medium=affiliate&utm_campaign=striver_dp_videos&leftPanelTab=0

****************************
//memo
#include <bits/stdc++.h> 

int func(int i,int j,vector<vector<int>>&grid,vector<vector<int>>&dp){
    if(i==0 && j==0)return grid[0][0];
    if(i<0 || j<0)return 1e9;
    if(dp[i][j]!=-1)return dp[i][j];
    int up=grid[i][j]+func(i-1,j,grid,dp);
    int left=grid[i][j]+func(i,j-1,grid,dp);
    return dp[i][j]=min(left,up);
}
int minSumPath(vector<vector<int>> &grid) {
    // Write your code here.
    int n=grid.size();
    int m=grid[0].size();
    vector<vector<int>>dp(n,vector<int>(m,-1));
    return func(n-1,m-1,grid,dp);
}

****************************
//tab

#include <bits/stdc++.h> 


int minSumPath(vector<vector<int>> &grid) {
    // Write your code here.
    int n=grid.size();
    int m=grid[0].size();
    vector<vector<int>>dp(n,vector<int>(m,-1));
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            if(i==0 && j==0)dp[i][j]=grid[0][0];
            else{
                int up=grid[i][j];                
                int left=grid[i][j];
                if(i>0)up+=dp[i-1][j];
                else{
                    up+=1e9;
                }
                if(j>0)left+=dp[i][j-1];
                else{
                    left+=1e9;
                }
                dp[i][j]=min(up,left);
            }
        }
    }
    return dp[n-1][m-1];
}

****************************
//space optimisation
#include <bits/stdc++.h> 


int minSumPath(vector<vector<int>> &grid) {
    // Write your code here.
    int n=grid.size();
    int m=grid[0].size();
    vector<vector<int>>dp(n,vector<int>(m,-1));
    vector<int>prev(m,1e9);
    for(int i=0;i<n;i++){
        vector<int>curr(m,0);
        for(int j=0;j<m;j++){
            if(i==0 && j==0)curr[j]=grid[0][0];         
            else{
                int up=0;                
                int left=0;
                if(i==0)up=1e9;
                else{
                    up=grid[i][j]+prev[j];           
                }
                if(j==0)left=1e9;
                else{
                    left=grid[i][j]+curr[j-1];
                }
             curr[j]=min(left,up);
            }
          
        }
        prev=curr;
    }
    return prev[m-1];
}

