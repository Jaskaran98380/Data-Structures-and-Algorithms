https://www.codingninjas.com/codestudio/problems/maze-obstacles_977241?source=youtube&campaign=striver_dp_videos&utm_source=youtube&utm_medium=affiliate&utm_campaign=striver_dp_videos&leftPanelTab=0

**************************
//memo
#include<bits/stdc++.h>
int memo(int i,int j,vector<vector<int>>&mat,int mod,vector<vector<int>>&dp){
    if(i==0 && j==0)return 1;
    if(i<0 || j<0)return 0;
    if(mat[i][j]==-1)return 0;
    if(dp[i][j]!=-1)return dp[i][j];
    int up=memo(i-1,j,mat,mod,dp);
    int left=memo(i,j-1,mat,mod,dp);
    return dp[i][j]=(up+left)%mod;
    
}

int mazeObstacles(int n, int m, vector< vector< int> > &mat) {
    // Write your code here
    vector<vector<int>>dp(n,vector<int>(m,-1));
    int mod=(int)1e9+7;
    return memo(n-1,m-1,mat,mod,dp);
}

***************************
tab

#include<bits/stdc++.h>


int mazeObstacles(int n, int m, vector< vector< int> > &mat) {
    // Write your code here
    vector<vector<int>>dp(n,vector<int>(m,-1));
    int mod=(int)1e9+7;
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            if(i==0 && j==0){
                dp[i][j]=1;
            }
            else if(mat[i][j]==-1)dp[i][j]=0;
            else{
                int up=0;
                int left=0;
                if(i>0)up=dp[i-1][j];
                if(j>0)left=dp[i][j-1];
                dp[i][j]=(up+left)%mod;
            }
        }
     
    }
       return dp[n-1][m-1];
}

****************************
//space optimisation

#include<bits/stdc++.h>


int mazeObstacles(int n, int m, vector< vector< int> > &mat) {
    // Write your code here
    int mod=(int)1e9+7;
    vector<int>prev(m,0);
    for(int i=0;i<n;i++){
        vector<int>curr(m,0);
        for(int j=0;j<m;j++){
            if(i==0 && j==0){
                curr[j]=1;
            }
            else if(mat[i][j]==-1)curr[j]=0;
            else{
                int up=0;
                int left=0;
                if(i>0)up=prev[j];
                if(j>0)left=curr[j-1];
                curr[j]=(up+left)%mod;
            }
        }
        prev=curr;
     
    }
       return prev[m-1];
}
