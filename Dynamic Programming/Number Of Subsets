https://www.codingninjas.com/codestudio/problems/number-of-subsets_3952532?source=youtube&campaign=striver_dp_videos&utm_source=youtube&utm_medium=affiliate&utm_campaign=striver_dp_videos&leftPanelTab=0

**************************
//memo

#include <bits/stdc++.h> 
int func(int ind,vector<int>&num,int tar,vector<vector<int>>&dp){
         if(ind==0){
           if(num[0]==0 && tar==0)return 2;
           if(tar==num[0] || tar==0)return 1;
             return 0;
         }
       if(dp[ind][tar]!=-1)return dp[ind][tar];    
    int notTake=func(ind-1,num,tar,dp);
    int take=0;
    if(num[ind]<=tar) take=func(ind-1,num,tar-num[ind],dp);
    return dp[ind][tar]= notTake+take;
      
}

int findWays(vector<int> &num, int tar)
{
    // Write your code here.
    int n=num.size();
    vector<vector<int>>dp(n,vector<int>(tar+1,-1));
    return func(n-1,num,tar,dp);
}

**************************
//tab

#include <bits/stdc++.h> 


int findWays(vector<int> &num, int tar)
{
    // Write your code here.
    int n=num.size();
    vector<vector<int>>dp(n,vector<int>(tar+1,0));
    for(int i=0;i<=tar;i++){
         if(i==0 && num[0]==0){
             dp[0][i]=2;
         }
         else if(i==0 || i==num[0]){
             dp[0][i]=1;
         }
        else{
            dp[0][i]=0;
        }
    }
    for(int i=1;i<n;i++){
        for(int j=0;j<=tar;j++){
             int notTake=dp[i-1][j];
    int take=0;
    if(num[i]<=j) take=dp[i-1][j-num[i]];
    dp[i][j]= notTake+take;
      
        }
    }
    return dp[n-1][tar];
}

*******************************
//space optimisation

#include <bits/stdc++.h> 


int findWays(vector<int> &num, int tar)
{
    // Write your code here.
    int n=num.size();
    vector<vector<int>>dp(n,vector<int>(tar+1,0));
    vector<int>prev(tar+1,0);
    vector<int>curr(tar+1,0);
    for(int i=0;i<=tar;i++){
         if(i==0 && num[0]==0){
             prev[i]=2;
         }
         else if(i==0 || i==num[0]){
             prev[i]=1;
         }     
    }
    for(int i=1;i<n;i++){
        for(int j=0;j<=tar;j++){
             int notTake=prev[j];
             int take=0;
             if(num[i]<=j) take=prev[j-num[i]];
             curr[j]= notTake+take;
        }
        prev=curr;
    }
    return prev[tar];
}
