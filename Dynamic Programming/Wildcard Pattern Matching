https://www.codingninjas.com/codestudio/problems/wildcard-pattern-matching_701650?source=youtube&campaign=striver_dp_videos&utm_source=youtube&utm_medium=affiliate&utm_campaign=striver_dp_videos&leftPanelTab=0

*****************************
//memo

#include<bits/stdc++.h>
bool func(string pattern,string text,int i,int j,vector<vector<int>>&dp){
    if(i<0 && j<0)return true;
    if(i<0 && j>=0)return false;
    if(j<0){
        for(int k=0;k<=i;k++){
            if(pattern[k]!='*'){
                return false;
            }
        }
        return true;
    }
    if(dp[i][j]!=-1)return dp[i][j];
    if(pattern[i]==text[j] || pattern[i]=='?'){
        return dp[i][j] = func(pattern,text,i-1,j-1,dp);
    }
    else if(pattern[i]=='*'){
        return dp[i][j] = func(pattern,text,i-1,j,dp) || func(pattern,text,i,j-1,dp);
    }
    return false;
    
}

bool wildcardMatching(string pattern, string text)
{
   // Write your code here.
   int n=pattern.size();
   int m=text.size();
    vector<vector<int>>dp(n,vector<int>(m,-1));
   return func(pattern,text,n-1,m-1,dp);
}


******************************
//tab

#include<bits/stdc++.h>

bool wildcardMatching(string pattern, string text)
{
   // Write your code here.
   int n=pattern.size();
   int m=text.size();
   vector<vector<int>>dp(n+1,vector<int>(m+1,0));
    dp[0][0]=1;
   for(int i=1;i<=m;i++){
       dp[0][i]=0;
   }
   for(int i=1;i<=n;i++){
       int flag=1;
       for(int i1=0;i1<i;i1++){
           if(pattern[i1]!='*'){
               flag=0;
               break;
           }
       }
       dp[i][0]=flag;
   } 
    for(int i=1;i<=n;i++){
        for(int j=1;j<=m;j++){
                if(pattern[i-1]==text[j-1] || pattern[i-1]=='?'){
         dp[i][j] = dp[i-1][j-1];
    }
    else if(pattern[i-1]=='*'){
         dp[i][j] = dp[i-1][j] || dp[i][j-1];
    }
            else{
    dp[i][j]=0;
            }
        }
    }
    return dp[n][m];
}


********************************
//space optimisation

#include<bits/stdc++.h>
bool func(string pattern,string text,int i,int j,vector<vector<int>>&dp){
    if(i<0 && j<0)return true;
    if(i<0 && j>=0)return false;
    if(j<0){
        for(int k=0;k<=i;k++){
            if(pattern[k]!='*'){
                return false;
            }
        }
        return true;
    }
    if(dp[i][j]!=-1)return dp[i][j];
    if(pattern[i]==text[j] || pattern[i]=='?'){
        return dp[i][j] = func(pattern,text,i-1,j-1,dp);
    }
    else if(pattern[i]=='*'){
        return dp[i][j] = func(pattern,text,i-1,j,dp) || func(pattern,text,i,j-1,dp);
    }
    return false;
    
}

bool wildcardMatching(string pattern, string text)
{
   // Write your code here.
   int n=pattern.size();
   int m=text.size();
   vector<int>curr(m+1,0),prev(m+1,0);
    prev[0]=1;
   for(int i=1;i<=m;i++){
       prev[i]=0;
   }

    for(int i=1;i<=n;i++){
       int flag=1;
       for(int i1=0;i1<i;i1++){
           if(pattern[i1]!='*'){
               flag=0;
               break;
           }
       }
       curr[0]=flag;
        for(int j=1;j<=m;j++){
                if(pattern[i-1]==text[j-1] || pattern[i-1]=='?'){
         curr[j] = prev[j-1];
    }
    else if(pattern[i-1]=='*'){
         curr[j] = prev[j] || curr[j-1];
    }
            else{
    curr[j]=0;
            }
        }
        prev=curr;
    }
    return prev[m];
}

