https://www.codingninjas.com/codestudio/problems/maximum-path-sum-in-the-matrix_797998?source=youtube&campaign=striver_dp_videos&utm_source=youtube&utm_medium=affiliate&utm_campaign=striver_dp_videos&leftPanelTab=0

*****************************
//memo

#include <bits/stdc++.h> 
int func(vector<vector<int>> &matrix,int i,int j,int col,vector<vector<int>>&dp){
     if(j<0 || j>col)return -1e9;
    if(i==0)return matrix[0][j];
   if(dp[i][j]!=-1)return dp[i][j];
    int up=matrix[i][j]+func(matrix,i-1,j,col,dp);
    int upLeft=matrix[i][j]+func(matrix,i-1,j-1,col,dp);
    int upRight=matrix[i][j]+func(matrix,i-1,j+1,col,dp);
    return dp[i][j]=max(max(up,upLeft),upRight);
}

int getMaxPathSum(vector<vector<int>> &matrix)
{
    //  Write your code here.
    int n=matrix.size();
    int m=matrix[0].size();
    int maxi=-1e9;
    vector<vector<int>>dp(n,vector<int>(m,-1));
    for(int i=0;i<m;i++){
        maxi=max(maxi,func(matrix,n-1,i,m-1,dp));
    }
    return maxi;
}

************************
//tab

#include <bits/stdc++.h> 

int getMaxPathSum(vector<vector<int>> &matrix)
{
    //  Write your code here.
    int n=matrix.size();
    int m=matrix[0].size();
    vector<vector<int>>dp(n,vector<int>(m,-1));
   
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            int upLeft=-1e9;
            int upRight=-1e9;
            if(i==0)dp[0][j]=matrix[0][j];
            else{
            int up=matrix[i][j]+dp[i-1][j];
            if(j>0) upLeft=matrix[i][j]+dp[i-1][j-1];
            if(j<m-1) upRight=matrix[i][j]+dp[i-1][j+1];
            dp[i][j]=max(max(up,upLeft),upRight);}
        }
    }
    int maxi2=-1e8;
    for(int i=0;i<m;i++){
        maxi2=max(maxi2,dp[n-1][i]);
    }
    return maxi2;
}

******************************
//space optimisation

#include <bits/stdc++.h> 

int getMaxPathSum(vector<vector<int>> &matrix)
{
    //  Write your code here.
    int n=matrix.size();
    int m=matrix[0].size();
   vector<int>prev(m,0);
    for(int i=0;i<n;i++){
        vector<int>curr(m,0);
        for(int j=0;j<m;j++){
            int upLeft=-1e9;
            int upRight=-1e9;
            if(i==0){
                prev[j]=matrix[0][j];
            }
            else{
            int up=matrix[i][j]+prev[j];
            if(j>0) upLeft=matrix[i][j]+prev[j-1];
            if(j<m-1) upRight=matrix[i][j]+prev[j+1];
            curr[j]=max(max(up,upLeft),upRight);}
        }
        if(i!=0)
        prev=curr;
    }
    int maxi2=-1e8;
    for(int i=0;i<m;i++){
        maxi2=max(maxi2,prev[i]);
    }
    return maxi2;
}
