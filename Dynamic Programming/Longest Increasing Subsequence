https://www.codingninjas.com/codestudio/problems/longest-increasing-subsequence_630459?source=youtube&campaign=striver_dp_videos&utm_source=youtube&utm_medium=affiliate&utm_campaign=striver_dp_videos&leftPanelTab=0

************************
//memo

#include<bits/stdc++.h>
// int func(int arr[],int n,int prevInd,int ind,vector<vector<int>>&dp){
//     if(ind==n)return 0;
//     if(dp[ind][prevInd+1]!=-1)return dp[ind][prevInd+1];
//     int nPick=func(arr,n,prevInd,ind+1,dp);
//     int pick=INT_MIN;
//     if(arr[ind]>arr[prevInd] || prevInd==-1){
//         pick=1+func(arr,n,ind,ind+1,dp);
//     }
//     return dp[ind][prevInd+1]=max(pick,nPick);
// }

// int longestIncreasingSubsequence(int arr[], int n)
// {
//     // Write Your Code here
//     vector<vector<int>>dp(n,vector<int>(n+1,-1));
//     return func(arr,n,-1,0,dp);
// }

****************************
//tab

int longestIncreasingSubsequence(int arr[], int n)
{
    // Write Your Code here
    vector<vector<int>>dp(n+1,vector<int>(n+1,0));
    for(int ind=n-1;ind>=0;ind--){
        for(int prevInd=ind-1;prevInd>=-1;prevInd--){
            int nPick=dp[ind+1][prevInd+1];
            int pick=INT_MIN;
            if(arr[ind]>arr[prevInd] || prevInd==-1){
                pick=1+dp[ind+1][ind+1];
            }
            dp[ind][prevInd+1]=max(pick,nPick);
        }
    }
    return dp[0][-1+1];
}

************************
//space opt

int longestIncreasingSubsequence(int arr[], int n)
{
    // Write Your Code here
    vector<int>prev(n+1,0),curr(n+1,0);
    for(int ind=n-1;ind>=0;ind--){
        for(int prevInd=ind-1;prevInd>=-1;prevInd--){
            int nPick=prev[prevInd+1];
            int pick=INT_MIN;
            if(arr[ind]>arr[prevInd] || prevInd==-1){
                pick=1+prev[ind+1];
            }
            curr[prevInd+1]=max(pick,nPick);
        }
        prev=curr;
    }
    return prev[-1+1];
}

**************************
//another way

int longestIncreasingSubsequence(int arr[], int n)
{
    // Write Your Code here
    vector<int>dp(n,1);
    int maxi=1;
    for(int ind=0;ind<n;ind++){
        for(int prevInd=0;prevInd<ind;prevInd++){
           if(arr[ind]>arr[prevInd]){
               dp[ind]=max(dp[ind],1+dp[prevInd]);
           }
        }
        maxi=max(maxi,dp[ind]);
        
    }
    return maxi;
}

******************
//if we want to print the subsequence as well

#include<bits/stdc++.h>


int longestIncreasingSubsequence(int arr[], int n)
{
    // Write Your Code here
    vector<int>dp(n,1);
    vector<int>hash(n);
    int maxi=1;
    int lastInd=0;
    for(int ind=0;ind<n;ind++){
        hash[ind]=ind;
        for(int prevInd=0;prevInd<ind;prevInd++){
           if(arr[ind]>arr[prevInd] && 1+dp[prevInd]>dp[ind]){
               dp[ind]=1+dp[prevInd];
               hash[ind]=prevInd;
           }
        }
        if(dp[ind]>maxi){
            maxi=dp[ind];
            lastInd=ind;
        }
        
    }
    vector<int>temp;
    temp.push_back(arr[lastInd]);
    while(hash[lastInd]!=lastInd){
        lastInd=hash[lastInd];
        temp.push_back(arr[lastInd]);
        
    }
    reverse(temp.begin(),temp.end());
    for(auto it:temp){
        cout<<it<<" ";
    }
    cout<<endl;
    return maxi;
}
