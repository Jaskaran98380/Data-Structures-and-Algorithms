https://www.codingninjas.com/codestudio/problems/subset-sum-equal-to-k_1550954?leftPanelTab=0

*****************************
//memo

#include <bits/stdc++.h> 
bool func(int ind,int target,vector<int>&arr,vector<vector<int>>&dp){
    if(target==0)return true;
    if(ind==0)return (arr[0]==target);
    if(dp[ind][target]!=-1){
        return dp[ind][target];
    }
    bool notTake=func(ind-1,target,arr,dp);
    bool take=false;
    if(arr[ind]<=target){
        take=func(ind-1,target-arr[ind],arr,dp);
    }
    return dp[ind][target] = take || notTake;
}

bool subsetSumToK(int n, int k, vector<int> &arr) {
    // Write your code here.
    vector<vector<int>>dp(n,vector<int>(k+1,-1));
    return func(n-1,k,arr,dp);
    
}

******************************
//tabulation

#include <bits/stdc++.h> 

bool subsetSumToK(int n, int k, vector<int> &arr) {
    // Write your code here.
    vector<vector<bool>>dp(n,vector<bool>(k+1,0));
    for(int i=0;i<n;i++){
        dp[i][0]=true;
    }
    dp[0][arr[0]]=true;
    for(int i=1;i<n;i++){
        for(int j=1;j<=k;j++){
            bool notTake=dp[i-1][j];
            bool take=false;
            if(arr[i]<=j){
                take=dp[i-1][j-arr[i]];
            }
            dp[i][j]= take || notTake;  
        }
    }
    return dp[n-1][k];
    
}

******************************
//space optimisation

#include <bits/stdc++.h> 


bool subsetSumToK(int n, int k, vector<int> &arr) {
    // Write your code here.
    vector<vector<bool>>dp(n,vector<bool>(k+1,0));
    vector<bool>prev(k+1,0);
    for(int i=0;i<=k;i++){
        if(i==0 || i==arr[0])prev[i]=true;
    }
    vector<bool>curr(k+1,0);
    for(int i=1;i<n;i++){
        for(int j=0;j<=k;j++){
            if(j==0)curr[j]=true;
            bool notTake = prev[j];
            bool take=false;
            if(arr[i]<=j){
                take=prev[j-arr[i]];
            }
            curr[j]= take || notTake;  
        }
        prev=curr;
    }
    return prev[k];
    
}
