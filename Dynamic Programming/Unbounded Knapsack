https://www.codingninjas.com/codestudio/problems/unbounded-knapsack_1215029?source=youtube&campaign=striver_dp_videos&utm_source=youtube&utm_medium=affiliate&utm_campaign=striver_dp_videos&leftPanelTab=0

*********************
//memo

#include <bits/stdc++.h> 
int func(int ind,int W,vector<int>&profit,vector<int>&weight,vector<vector<int>>&dp){
    if(ind==0){
        if(weight[ind]<=W)return profit[ind]*(W/weight[ind]);
        return 0;
    }
    if(dp[ind][W]!=-1)return dp[ind][W];
    int notTake=0+func(ind-1,W,profit,weight,dp);
    int take=0;
    if(weight[ind]<=W)take=profit[ind]+func(ind,W-weight[ind],profit,weight,dp);
    return dp[ind][W] = max(take,notTake);
}

int unboundedKnapsack(int n, int w, vector<int> &profit, vector<int> &weight)
{
    // Write Your Code Here.
    vector<vector<int>>dp(n,vector<int>(w+1,-1));
    return func(n-1,w,profit,weight,dp);
}

****************************
//tab

#include <bits/stdc++.h> 

int unboundedKnapsack(int n, int w, vector<int> &profit, vector<int> &weight)
{
    // Write Your Code Here.
    vector<vector<int>>dp(n,vector<int>(w+1,0));
    for(int i=weight[0];i<=w;i++){
        dp[0][i]=profit[0]*(i/weight[0]);
    }
    for(int i=1;i<n;i++){
        for(int j=0;j<=w;j++){
            int notTake=0+dp[i-1][j];
            int take=0;
            if(weight[i]<=j)take=profit[i]+dp[i][j-                                  weight[i]];
             dp[i][j] = max(take,notTake);
        }
    }
    return dp[n-1][w];
}


***************************
//space optimisation

#include <bits/stdc++.h> 

int unboundedKnapsack(int n, int w, vector<int> &profit, vector<int> &weight)
{
    // Write Your Code Here.
    vector<int>prev(w+1,0);
    vector<int>curr(w+1,0);
    for(int i=weight[0];i<=w;i++){
        prev[i]=profit[0]*(i/weight[0]);
    }
    for(int i=1;i<n;i++){
        for(int j=0;j<=w;j++){
            int notTake=0+prev[j];
            int take=0;
            if(weight[i]<=j)take=profit[i]+curr[j-weight[i]];
             curr[j] = max(take,notTake);
        }
        prev=curr;
    }
    return prev[w];
}
