https://www.codingninjas.com/codestudio/problems/problem-name-boolean-evaluation_1214650?source=youtube&campaign=striver_dp_videos&utm_source=youtube&utm_medium=affiliate&utm_campaign=striver_dp_videos&leftPanelTab=0

***********************
//memo

#include <bits/stdc++.h> 
#define ll long long int
int mod=1000000007;

ll func(string &exp,int i,int j,int isTrue,vector<vector<vector<ll>>>&dp){
    // if(i>j)return 0;   // your wish!
    if(i==j){
      if (isTrue) {
        return exp[i] == 'T';
      } else {
        return exp[i] == 'F';
      }
    }
    if(dp[i][j][isTrue]!=-1)return dp[i][j][isTrue];
    ll ways=0;
    for(int ind=i+1;ind<j;ind+=2){
        ll lt=func(exp,i,ind-1,1,dp);
        ll lf=func(exp,i,ind-1,0,dp);
        ll rt=func(exp,ind+1,j,1,dp);
        ll rf=func(exp,ind+1,j,0,dp);

        if(exp[ind]=='&'){
            if(isTrue){
                ways =(ways + (lt*rt)%mod) % mod;    //modulo after addition because if we dont do then it will overflow!

            }
            else{
                ways =(ways + (lt*rf)%mod + (lf*rt)%mod + (lf*rf)%mod) % mod;
            }
        }
          else if(exp[ind]=='|'){
            if(isTrue){
                ways =(ways + (lt*rf)%mod + (lf*rt)%mod + (lt*rt)%mod) % mod;
            }
            else{
                ways =(ways + (lf*rf)%mod) % mod;
            }
        }
           else{
            if(isTrue){
                ways =(ways + (lt*rf)%mod + (lf*rt)%mod) % mod;
            }
            else{
                ways =(ways + (lt*rt)%mod + (lf*rf)%mod) % mod;
            }
        }
    }
    return dp[i][j][isTrue] = ways;
}
int evaluateExp(string & exp) {
    // Write your code here.
    int n=exp.size();
    vector<vector<vector<ll>>>dp(n,vector<vector<ll>>(n,vector<ll>(2,-1)));
    return func(exp,0,n-1,1,dp);
}

**************************
//tab

#include <bits/stdc++.h> 
#define ll long long int
int mod=1000000007;

int evaluateExp(string & exp) {
    // Write your code here.
    int n=exp.size();
    vector<vector<vector<ll>>>dp(n+1,vector<vector<ll>>(n+1,vector<ll>(2,0)));
    for(int i=n-1;i>=0;i--){
        for(int j=0;j<=n-1;j++){
            for(int isTrue=0;isTrue<=1;isTrue++){
                if(i==j){
                    if(isTrue) {
                    if(exp[i] == 'T'){
                        dp[i][j][isTrue]=1;
                    }
                    else{
                        dp[i][j][isTrue]=0;
                    }
                }   
                else {
                      if(exp[i] == 'F'){
                        dp[i][j][isTrue]=1;
                    }
                    else{
                        dp[i][j][isTrue]=0;
                    }
                }
                continue;
                }
                ll ways=0;
                for(int ind=i+1;ind<j;ind+=2){
                    ll lt=dp[i][ind-1][1];
                    ll lf=dp[i][ind-1][0];
                    ll rt=dp[ind+1][j][1];
                    ll rf=dp[ind+1][j][0];

                    if(exp[ind]=='&'){
                        if(isTrue){
                            ways =(ways + (lt*rt)%mod) % mod;    //modulo after addition because if we dont do then it will overflow!

                        }
                        else{
                            ways =(ways + (lt*rf)%mod + (lf*rt)%mod + (lf*rf)%mod) % mod;
                        }
                    }
                    else if(exp[ind]=='|'){
                        if(isTrue){
                            ways =(ways + (lt*rf)%mod + (lf*rt)%mod + (lt*rt)%mod) % mod;
                        }
                        else{
                            ways =(ways + (lf*rf)%mod) % mod;
                        }
                    }
                    else{
                        if(isTrue){
                            ways =(ways + (lt*rf)%mod + (lf*rt)%mod) % mod;
                        }
                        else{
                            ways =(ways + (lt*rt)%mod + (lf*rf)%mod) % mod;
                        }
                    }
                }
               dp[i][j][isTrue] = ways;
            }
        }
    }
    return dp[0][n-1][1];
}








