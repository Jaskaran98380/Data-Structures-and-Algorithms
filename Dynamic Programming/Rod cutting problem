https://www.codingninjas.com/codestudio/problems/rod-cutting-problem_800284?source=youtube&campaign=striver_dp_videos&utm_source=youtube&utm_medium=affiliate&utm_campaign=striver_dp_videos&leftPanelTab=0

****************************
//memo

#include<bits/stdc++.h>
int func(vector<int>& price,int ind,int N,vector<vector<int>>&dp){
    if(ind==0){
        int rodLength=1;
        if(rodLength<=N)return price[0]*(N/rodLength);
        return 0;
    }
    if(dp[ind][N]!=-1)return dp[ind][N];
    int notTake=func(price,ind-1,N,dp);
    int take=0;
    int rodLength=ind+1;
    if(rodLength<=N)take=price[ind]+func(price,ind,N-rodLength,dp);
    return dp[ind][N]= max(take,notTake);
}

int cutRod(vector<int> &price, int n)
{
	// Write your code here.
    vector<vector<int>>dp(n,vector<int>(n+1,-1));
    return func(price,n-1,n,dp);
}


**************************
//tab

#include<bits/stdc++.h>
int func(vector<int>& price,int ind,int N,vector<vector<int>>&dp){
    if(ind==0){
        int rodLength=1;
        if(rodLength<=N)return price[0]*(N/rodLength);
        return 0;
    }
    if(dp[ind][N]!=-1)return dp[ind][N];
    int notTake=func(price,ind-1,N,dp);
    int take=0;
    int rodLength=ind+1;
    if(rodLength<=N)take=price[ind]+func(price,ind,N-rodLength,dp);
    return dp[ind][N]= max(take,notTake);
}

int cutRod(vector<int> &price, int n)
{
	// Write your code here.
    vector<vector<int>>dp(n,vector<int>(n+1,0));
    for(int i=1;i<=n;i++){
        dp[0][i]=price[0]*i;
    }
    for(int i=1;i<n;i++){
        for(int j=0;j<=n;j++){
               int notTake=dp[i-1][j];
               int take=0;
               int rodLength=i+1;
               if(rodLength<=j)take=price[i]+dp[i][j-rodLength];
               dp[i][j]= max(take,notTake);
        }
    }
    return dp[n-1][n];
}

******************************
//space optimisation

#include<bits/stdc++.h>
int func(vector<int>& price,int ind,int N,vector<vector<int>>&dp){
    if(ind==0){
        int rodLength=1;
        if(rodLength<=N)return price[0]*(N/rodLength);
        return 0;
    }
    if(dp[ind][N]!=-1)return dp[ind][N];
    int notTake=func(price,ind-1,N,dp);
    int take=0;
    int rodLength=ind+1;
    if(rodLength<=N)take=price[ind]+func(price,ind,N-rodLength,dp);
    return dp[ind][N]= max(take,notTake);
}

int cutRod(vector<int> &price, int n)
{
	// Write your code here.
    vector<int>prev(n+1,0);
    vector<int>curr(n+1,0);
    for(int i=1;i<=n;i++){
        prev[i]=price[0]*i;
    }
    for(int i=1;i<n;i++){
        for(int j=0;j<=n;j++){
               int notTake=prev[j];
               int take=0;
               int rodLength=i+1;
               if(rodLength<=j)take=price[i]+curr[j-                              rodLength];
               curr[j]= max(take,notTake);
        }
        prev=curr;
    }
    return prev[n];
}


