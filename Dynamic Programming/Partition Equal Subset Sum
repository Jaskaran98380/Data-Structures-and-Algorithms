https://www.codingninjas.com/codestudio/problems/partition-equal-subset-sum_892980?source=youtube&campaign=striver_dp_videos&utm_source=youtube&utm_medium=affiliate&utm_campaign=striver_dp_videos&leftPanelTab=0

****************************
//memo

#include <bits/stdc++.h> 
bool func(int ind,int target,vector<int>&arr,vector<vector<int>>&dp){
    if(target==0)return true;
    if(ind==0)return (arr[0]==target);
    if(dp[ind][target]!=-1){
        return dp[ind][target];
    }
    bool notTake=func(ind-1,target,arr,dp);
    bool take=false;
    if(arr[ind]<=target){
        take=func(ind-1,target-arr[ind],arr,dp);
    }
    return dp[ind][target]= take || notTake;
}

bool canPartition(vector<int> &arr, int n)
{
	// Write your code here.
    int sum=0;
    for(int i=0;i<n;i++){
        sum+=arr[i];
    }
    if(sum%2!=0)return false;
    int target=sum/2;
    vector<vector<int>>dp(n,vector<int>(target+1,-1));
    return func(n-1,target,arr,dp);
}


****************************
//tab

#include <bits/stdc++.h> 


bool canPartition(vector<int> &arr, int n)
{
	// Write your code here.
    int sum=0;
    for(int i=0;i<n;i++){
        sum+=arr[i];
    }
    if(sum%2!=0)return false;
    int target=sum/2;
    vector<vector<int>>dp(n,vector<int>(target+1,0));
      for(int i=0;i<n;i++){
        dp[i][0]=true;
    }
    dp[0][arr[0]]=true;
    for(int i=1;i<n;i++){
        for(int j=1;j<=target;j++){
            bool notTake=dp[i-1][j];
            bool take=false;
            if(arr[i]<=j){
                take=dp[i-1][j-arr[i]];
            }
            dp[i][j]= take || notTake;  
        }
    }
    return dp[n-1][target];
}


*******************************
//space optimisation

#include <bits/stdc++.h> 


bool canPartition(vector<int> &arr, int n)
{
	// Write your code here.
    int sum=0;
    for(int i=0;i<n;i++){
        sum+=arr[i];
    }
    if(sum%2!=0)return false;
    int target=sum/2;
    vector<bool>prev(target+1,0);
    for(int i=0;i<=target;i++){
        if(i==0 || i==arr[0])prev[i]=true;
    }
    vector<bool>curr(target+1,0);
    for(int i=1;i<n;i++){
        for(int j=0;j<=target;j++){
            if(j==0)curr[j]=true;
            bool notTake = prev[j];
            bool take=false;
            if(arr[i]<=j){
                take=prev[j-arr[i]];
            }
            curr[j]= take || notTake;  
        }
        prev=curr;
    }
    return prev[target];
}
