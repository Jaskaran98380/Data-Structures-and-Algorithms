https://www.codingninjas.com/codestudio/problems/highway-billboards_3125969?source=youtube&campaign=striver_dp_videos&utm_source=youtube&utm_medium=affiliate&utm_campaign=striver_dp_videos&leftPanelTab=0

***************************
//memo

#include <bits/stdc++.h> 

int func(vector<int>&prices,int n,int ind,int buy,vector<vector<int>>&dp){
    if(ind>=n)return 0;
    int profit=0;
    if(dp[ind][buy]!=-1)return dp[ind][buy];
    if(buy==0){
        profit=max(-prices[ind]+func(prices,n,ind+1,1,dp),func(prices,n,ind+1,0,dp));
    }
    else{
        profit=max(prices[ind]+func(prices,n,ind+2,0,dp),func(prices,n,ind+1,1,dp));
    }
    return dp[ind][buy]=profit;
}
int stockProfit(vector<int> &prices){
    // Write your code here.
    int n=prices.size();
    vector<vector<int>>dp(n,vector<int>(2,-1));
    return func(prices,n,0,0,dp);
}

******************
//tab

#include <bits/stdc++.h> 

int stockProfit(vector<int> &prices){
    // Write your code here.
    int n=prices.size();
    vector<vector<int>>dp(n+2,vector<int>(2,0));
    for(int ind=n-1;ind>=0;ind--){
        for(int buy=0;buy<=1;buy++){
            int profit=0;
            if(buy==0){
                dp[ind][buy]=max(-prices[ind]+dp[ind+1][1],dp[ind+1][0]);
            }
            else{
                dp[ind][buy]=max(prices[ind]+dp[ind+2][0],dp[ind+1][1]);
            }
        }
    }
    return dp[0][0];
}

***********************
//another better way of tabulation

#include <bits/stdc++.h> 

int stockProfit(vector<int> &prices){
    // Write your code here.
    int n=prices.size();
    vector<vector<int>>dp(n+2,vector<int>(2,0));
    for(int ind=n-1;ind>=0;ind--){
        dp[ind][0]=max(-prices[ind]+dp[ind+1][1],dp[ind+1][0]);
        dp[ind][1]=max(prices[ind]+dp[ind+2][0],dp[ind+1][1]);
    }
    return dp[0][0];
}

************************
//space optimisation

#include <bits/stdc++.h> 

int stockProfit(vector<int> &prices){
    // Write your code here.
    int n=prices.size();
    vector<int>front1(2,0),front2(2,0),curr(2,0);
    for(int ind=n-1;ind>=0;ind--){
        curr[0]=max(-prices[ind]+front1[1],front1[0]);
        curr[1]=max(prices[ind]+front2[0],front1[1]);
        front2=front1;
        front1=curr;
       
    }
    return front1[0];
}
