Problem Statement
You are given two positive integers N and M. You have to find the Nth root of M i.e. M(1/N).
Note:
N'th root of an integer M is a real number, which when raised to the power N gives M as a result.

N'th root of the M should be correct up to 6 decimal places.
Input Format:
The first line of the input contains an integer T denoting the number of test cases.

The first and only line of each test case consists of two space-separated integers N and M.
Output Format:
For each test case, print a real number with precision up to 6 decimal places that denote the Nth root of M in a separate line.
Sample Input 1:
1
3 27
Sample Output 1:
3.000000
Explanation For Sample Input 1:
3rd Root of 27 is 3.000000, as (3.000000)^3 is equal to 27.
Sample Input 2:
1
4 69
Sample Output 2:
2.882121
*************************
double multiply(double number, int n) {
        double ans=1.0;
        while(n>0){
            if(n%2==1){
                ans=ans*number;
                n--;
            }
            else{
                number=number*number;
                n/=2;
            }
        }
    return ans;
}

double findNthRootOfM(int n, int m) {
	// Write your code here.
     double low = 1;
    double high = m;
    double eps = 1e-8; 
    
    while((high - low) > eps) {
        double mid = (low + high) / 2.0; 
        if(multiply(mid, n) < m) {
            low = mid; 
        }
        else {
            high = mid; 
        }
    }
    return high;
}
