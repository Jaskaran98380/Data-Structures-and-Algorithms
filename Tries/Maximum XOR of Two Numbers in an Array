Given an integer array nums, return the maximum result of nums[i] XOR nums[j], where 0 <= i <= j < n.

 

Example 1:

Input: nums = [3,10,5,25,2,8]
Output: 28
Explanation: The maximum result is 5 XOR 25 = 28.
Example 2:

Input: nums = [14,70,53,83,49,91,36,80,92,51,66,70]
Output: 127
 

Constraints:

1 <= nums.length <= 2 * 105
0 <= nums[i] <= 231 - 1

************************************

 class Node {
     public:
  Node * links[2];
 
  bool containsKey(int ind) {
    return (links[ind] != NULL);
  }
       Node * get(int ind) {
    return links[ind];}
      void put(int ind, Node * node) {
    links[ind] = node;
  }
};
class Trie {
  private: Node * root;
  public:
    Trie() {
      root = new Node();
    }
   
  
 
 
  public:
    void insert(int num) {
      Node * node = root;
      // cout << num << endl; 
      for (int i = 31; i >= 0; i--) {
        int bit = (num >> i) & 1;
        if (!node -> containsKey(bit)) {
          node -> put(bit, new Node());
        }
        node = node -> get(bit);
      }
    }
  public:
    int findMax(int num) {
      Node * node = root;
      int maxNum = 0;
      for (int i = 31; i >= 0; i--) {
        int bit = (num >> i) & 1;
        if (node -> containsKey(!bit)) {
          maxNum = maxNum | (1 << i);
          node = node -> get(!bit);
        } else {
          node = node -> get(bit);
        }
      }
      return maxNum;
    }
};

class Solution {
public:
    int findMaximumXOR(vector<int>& nums) {
         Trie trie;
        int n=nums.size();
  for (int i = 0; i < n; i++) {
    trie.insert(nums[i]);
  }
  int maxi = 0;
  for (int i = 0; i < n; i++) {
    maxi = max(maxi, trie.findMax(nums[i]));
  }
  return maxi;
    }
};





//recursive solution
// class Node{
//     public:
//     int data;
//     Node*links[2];
    
//     Node(int d){
//         data=d;
//         for(int i=0;i<2;i++){
//             links[i]=NULL;
//         }
//     }
// };

// class Trie{
//     Node*root;
//     public:
//     Trie(){root=new Node('\0');}
    
//     void insertHelper(Node*root,int num,int &count){
//                 if(count==32){
//             return;
//         }
       
//       Node*child;
//         int bit = (num >> (31-count)) & 1;
//         if (root->links[bit]!=NULL) {
//           child=root->links[bit];
//         }
//         else{
//             child=new Node(bit);
//             root->links[bit]=child;
//         }
//         count++;
//         insertHelper(child,num,count);
//     }
    
//     void insert(int num,int count){
//         insertHelper(root,num,count);
//       }
    
//     int getMaxH(Node*root,int num,int &count,int &maxNum){
//              if(count==32){
//             return maxNum;
//         }
//         int bit=(num>>(31-count))&1;
//         Node*child;
//         if(root->links[1-bit]!=NULL){
//             child=root->links[!bit];
//             maxNum=maxNum | (1<<(31-count));
//         }
//         else{
//             child=root->links[bit];
//         }
//         count++;
//         return getMaxH(child,num,count,maxNum);
//     }
    
//     int getMax(int num,int count,int maxNum){
//         return getMaxH(root,num,count,maxNum);
   
//     }
    
// };










// class Solution {
// public:
//     int findMaximumXOR(vector<int>& nums) {
//         Trie t;
//         int n=nums.size();
        
//         for(int i=0;i<n;i++){
//                 t.insert(nums[i],0);
                
//         }
//         int maxi=0;
//         for(int i=0;i<n;i++){
//             maxi=max(maxi,t.getMax(nums[i],0,0));
//         }
//         return maxi;
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
//     }
// };
