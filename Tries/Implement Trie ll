https://www.codingninjas.com/codestudio/problems/implement-trie_1387095?utm_source=youtube&utm_medium=affiliate&utm_campaign=striver_tries_videos&leftPanelTab=0

*****************************

#include<bits/stdc++.h>

class TrieNode{
    public:
    char data;
    TrieNode*children[26];
    bool is_terminal;
    int cp;
    int cw;
    
    TrieNode(char ch){
        data=ch;
        for(int i=0;i<26;i++){
            children[i]=NULL;
        }
        is_terminal=false;
       
        
            cp=0;
            cw=0;
        
    }
};


class Trie{

    public:
    TrieNode*root;

    Trie(){
        // Write your code here.
        root=new TrieNode('\0');
    }
    
        void insertWord(TrieNode*root,string word){
        if(word.length()==0){
            root->is_terminal=true;
            root->cw++;
            return;
        }
        int index=word[0]-'a';
        TrieNode*child;
        if(root->children[index]!=NULL){
            child=root->children[index];
            
        }
        else{
            child=new TrieNode(word[0]);
            root->children[index]=child;
            
        }
            child->cp++;
        insertWord(child,word.substr(1));
    }

    void insert(string &word){
        // Write your code here.
        insertWord(root,word);
    }
    
    int search(TrieNode*root,string word){
           if(word.length()==0){
              
                     
            return root->cw;
               
               
          
        }
        int index=word[0]-'a';
        TrieNode*child;
        if(root->children[index]!=NULL){
            child=root->children[index];
            
        }
        else{
           return 0;
        }
        return search(child,word.substr(1));
    }

    int countWordsEqualTo(string &word){
        // Write your code here.
        return search(root,word);
    }
    
    int search2(TrieNode*root,string word){
               if(word.length()==0){
               {
                     
            return root->cp;
               }
               
          
        }
        int index=word[0]-'a';
        TrieNode*child=NULL;
        if(root->children[index]!=NULL){
            child=root->children[index];
            
        }
        else{
           return 0;
        }
       return search2(child,word.substr(1));
    }

    int countWordsStartingWith(string &word){
        // Write your code here.
        return search2(root,word);
    }

    void eraseHelper(TrieNode*root,string word){
        if(word.length()==0){
               {
                     
                    root->cw--;
               }
              
          
        }
        int index=word[0]-'a';
        TrieNode*child=NULL;
        if(root->children[index]!=NULL){
            child=root->children[index];
            child->cp--;
              eraseHelper(child,word.substr(1));
        }
      
       
       
    }
    void erase(string &word){
        // Write your code here.
        eraseHelper(root,word);
               
        
    }
};
