https://www.codingninjas.com/codestudio/problems/complete-string_2687860?topList=striver-sde-sheet-problems&utm_source=striver&utm_medium=website&leftPanelTab=0

**********************************

class Node{
    public:
    char data;
    Node*children[26];
    bool is_terminal;
    
    Node(char ch){
        data=ch;
        for(int i=0;i<26;i++){
            children[i]=NULL;
        }
        is_terminal=false;
    }
};

class Trie{
    private:
    Node*root;
    public:
    Trie(){
        root=new Node('\0');
    }
    void insertHelper(Node*root,string word){
        if(word.length()==0){
            root->is_terminal=true;
            return;
        }
        int index=word[0]-'a';
        Node*child;
        if(root->children[index]!=NULL){
            child=root->children[index];
        }
        else{
            child=new Node(word[0]);
            root->children[index]=child;
        }
        insertHelper(child,word.substr(1));
    }
    
    void insert(string word){
        insertHelper(root,word);
    }
    
    bool prefixChecker(Node*root,string word){
             if(word.length()==0){
           
            return true;
        }
        int index=word[0]-'a';
        Node*child;
        if(root->children[index]!=NULL){
            child=root->children[index];
            if(child->is_terminal){
                 return prefixChecker(child,word.substr(1));
            }
            else{
                return false;
            }
        }
    }
    bool prefixCheck(string word){
        return prefixChecker(root,word);
    
    
       
    }
};


string completeString(int n, vector<string> &a){
    // Write your code here.
    Trie t;
    for(int i=0;i<n;i++){
         t.insert(a[i]);
    }
    string longest="";
    for(int i=0;i<n;i++){
           if(t.prefixCheck(a[i])){
        if(a[i].length()>longest.length()){
            longest=a[i];
        }
        else if(a[i].length()==longest.length()){
            if(a[i]<longest){
                longest=a[i];
            }
        }
        }
    }
    if(longest=="")return"None";
    return longest;
      
    
        
   
}
