https://www.codingninjas.com/codestudio/problems/1062667?topList=striver-sde-sheet-problems&utm_source=striver&utm_medium=website&leftPanelTab=0

***************************************

vector<vector<int>> pwset(vector<int>v)
{
    //Write your code here
    int n=v.size();
    vector<vector<int>>ans;
    //(1<<n)=2 raise to power n!
    for(int i=0;i<=(1<<n)-1;i++){
        vector<int>v2;
        for(int j=0;j<n;j++){
            if(i & (1<<j)){
                v2.push_back(v[j]);
            }
        }
        if(v2.size()>0){
            ans.push_back(v2);
        }
    }
    return ans;
}

****************************************
Given a string S, Find all the possible subsequences of the String in lexicographically-sorted order.

Example 1:

Input : str = "abc"
Output: a ab abc ac b bc c
Explanation : There are 7 subsequences that 
can be formed from abc.
Example 2:

Input: str = "aa"
Output: a a aa
Explanation : There are 3 subsequences that 
can be formed from aa.
Your Task:
You don't need to read input or print anything. Your task is to complete the function AllPossibleStrings() which takes S as the input parameter and returns a list of all possible subsequences (non-empty) that can be formed from S in lexicographically-sorted order.

Expected Time Complexity: O(2n) where n is the length of the String
Expected Space Complexity: O(n * 2n)
 

Constraints: 
1 <= Length of String <= 16

*********************************

class Solution{
	public:
		vector<string> AllPossibleStrings(string s){
		    // Code here
		        int n=s.size();
     vector<string>v2;
    for(int i=1;i<=(1<<n)-1;i++){
        string s2="";
        for(int j=0;j<n;j++){
            if(i & (1<<j)){
                s2=s2+s[j];
            }
        }
        v2.push_back(s2);
     
    }
    sort(v2.begin(),v2.end());
    return v2;
		}
};
