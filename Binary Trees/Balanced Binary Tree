Given a binary tree, determine if it is height-balanced.

For this problem, a height-balanced binary tree is defined as:

a binary tree in which the left and right subtrees of every node differ in height by no more than 1.

 

Example 1:


Input: root = [3,9,20,null,null,15,7]
Output: true
Example 2:


Input: root = [1,2,2,3,3,null,null,4,4]
Output: false
Example 3:

Input: root = []
Output: true
 

Constraints:

The number of nodes in the tree is in the range [0, 5000].
-104 <= Node.val <= 104
*********************************
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int height(TreeNode*root){
        if(root==NULL){
            return 0;
        }
        int lh=height(root->left);
        int rh=height(root->right);
        if(lh==-1 || rh==-1){
            return -1;
        }
        if(abs(lh-rh)>1){
            return -1;
        }
        return 1+max(lh,rh);
    }
    
    bool isBalanced(TreeNode* root) {
        int a=height(root);
        if(a==-1){
            return false;
        }
        return true;
    }
};

*************************************
//just by using pair instead of using only height!
CODE:*******************

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    pair<int,bool> height(TreeNode*root){
        if(root==NULL){
            pair<int,bool>p;
            p.first=0;
            p.second=true;
            return p;
        }
        pair<int,bool>left=height(root->left);
        pair<int,bool>right=height(root->right);
        int height=1+max(left.first,right.first);
         pair<int,bool>p;
        if(abs(left.first-right.first)>1 || left.second==false || right.second==false){
           
            p.first=height;
            p.second=false;
        }
        else{
        
        p.first=height;
            p.second=true;
            
            }
        return p;
        
        
    }
    
    bool isBalanced(TreeNode* root) {
        pair<int,bool>p= height(root);
        return p.second;
    }
};
