Given the root of a binary tree, return the preorder traversal of its nodes' values.

 

Example 1:


Input: root = [1,null,2,3]
Output: [1,2,3]
Example 2:

Input: root = []
Output: []
Example 3:

Input: root = [1]
Output: [1]
 

Constraints:

The number of nodes in the tree is in the range [0, 100].
-100 <= Node.val <= 100

****************************************

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
        void preorder(vector<int>&v,TreeNode* root){
        if(root==NULL){
            return;    
        }
        v.push_back(root->val);
        preorder(v,root->left);
        preorder(v,root->right);
    }
    vector<int> preorderTraversal(TreeNode* root) {
        vector<int>v;
        preorder(v,root);
        return v;
    }
};

//iterative approach
class Solution {
public:
    vector<int> preorderTraversal(TreeNode* root) {
                stack<TreeNode*>s;
        vector<int>v;
        while(true){
            if(root!=NULL){
                v.push_back(root->val);
                s.push(root);
                root=root->left;
            }
            else{
                if(s.empty())break;
                root=s.top();
                s.pop();
                root=root->right;
                
            }
        }
        return v;
    }
};
