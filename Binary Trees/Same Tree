Given the roots of two binary trees p and q, write a function to check if they are the same or not.

Two binary trees are considered the same if they are structurally identical, and the nodes have the same value.

 

Example 1:


Input: p = [1,2,3], q = [1,2,3]
Output: true
Example 2:


Input: p = [1,2], q = [1,null,2]
Output: false
Example 3:


Input: p = [1,2,1], q = [1,1,2]
Output: false
 

Constraints:

The number of nodes in both trees is in the range [0, 100].
-104 <= Node.val <= 104

**************************************

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isSameTree(TreeNode* p, TreeNode* q) {
        if(p==NULL || q==NULL){
            return (p==q);
        }
        bool a=isSameTree(p->left,q->left);
        bool b=isSameTree(p->right,q->right);
        if(a==false || b==false)return false;
        return (p->val==q->val);
    }
};

***********************************
just another way using recursion

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isSameTree(TreeNode* p, TreeNode* q) {
        if(p==NULL || q==NULL){
            return (p==q);
        }
        return (p->val == q->val) &&
        isSameTree(p->left,q->left) &&
        isSameTree(p->right,q->right);
    }
};

***************************************
iterative way

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isSameTree(TreeNode* p, TreeNode* q) {
           queue<TreeNode*> Q;
        if(!p || !q) return p==q;       //If both roots are null
        Q.push(p); Q.push(q);           //Push both the roots in the queue                  
        while(!Q.empty())  {
            TreeNode* left = Q.front(); Q.pop();        
            TreeNode *right = Q.front(); Q.pop();               
            if(!left && !right) continue;                     
            if(!left || !right) return false;                  
            if(left->val != right->val) return false;        
            
            //Push left childs of both nodes
            Q.push(left->left);                         
            Q.push(right->left);

            //Push right child of both nodes
            Q.push(left->right);
            Q.push(right->right);
        }
        return true;  
    }
};
