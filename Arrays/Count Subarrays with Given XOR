Problem Statement
Given an array of integers ‘ARR’ and an integer ‘X’, you are supposed to find the number of subarrays of 'ARR' which have bitwise XOR of the elements equal to 'X'.
Sample Input 1 :
2
5 8
5 3 8 3 10
3 7
5 2 9
Sample Output 1 :
2
1
Explanation Of Sample Input 1 :
In the first test case, the subarray from index 1 to index 3 i.e. {3,8,3} and the subarray from index 2 to index 2 i.e. {8} have bitwise XOR equal to 8.

In the second test case, the subarray from index 0 to index 1 i.e. {5,2} has bitwise XOR equal to 7.
Sample Input 2 :
2
6 11
10 1 0 3 4 7
5 4
4 3 1 2 4
Sample Output 2 :
3
4

********************************

#include <bits/stdc++.h> 
int subarraysXor(vector<int> &arr, int x)
{
    //    Write your code here.
    int n=arr.size();
    unordered_map<int,int>mp;
    int count=0;
    int xorr=0;
    for(int i=0;i<n;i++){
        xorr=arr[i]^xorr;
        if(xorr==x){
            count++;
        }
        int y=xorr^x;
        if(mp.find(y)!=mp.end()){
            count=count+mp[y];
        }
        mp[xorr]++;
        
    }
    return count;
}
