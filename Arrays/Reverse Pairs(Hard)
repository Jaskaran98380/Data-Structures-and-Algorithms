Given an integer array nums, return the number of reverse pairs in the array.

A reverse pair is a pair (i, j) where 0 <= i < j < nums.length and nums[i] > 2 * nums[j].

 

Example 1:

Input: nums = [1,3,2,3,1]
Output: 2
***************************

class Solution {
public:
    
    int merge(vector<int> & nums,int s,int mid,int e){
        int count=0;
        int j=mid+1;
        for(int i=s;i<=mid;i++){
            while(j<=e && nums[i]>2LL * nums[j]){
                j++;
            }
            count+=j-(mid+1);
        }
        int l1=mid-s+1;
        int l2=e-mid;
        int * left=new int[l1];
        int *right=new int[l2];
        for(int i=0;i<l1;i++){
            left[i]=nums[s+i];
        }
         for(int j=0;j<l2;j++){
            right[j]=nums[mid+1+j];
        }
        int i=0,l=0,k=s;
        while(i<l1 && l<l2){
            if(left[i]<=right[l]){
                nums[k++]=left[i++];
            }
            else{
                nums[k++]=right[l++];
            }
        }
        while(i<l1){
            nums[k++]=left[i++];
        }
        while(j<l2){
            nums[k++]=right[l++];
        }
        delete[]left;
        delete[]right;
        return count;
    }
    
    int mergesort(vector<int> & nums,int s,int e){
        int inv=0;
        
        if(s>=e){
            return 0;
        }
        int mid=(s+e)/2;
       inv+= mergesort(nums,s,mid);
       inv+= mergesort(nums,mid+1,e);
        inv+= merge(nums,s,mid,e);
        return inv;
    }
    int reversePairs(vector<int>& nums) {
        
        return mergesort(nums,0,nums.size()-1);
    
    }
};
