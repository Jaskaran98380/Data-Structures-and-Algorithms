Problem Statement
You are given an array of size ‘N’. The elements of the array are in the range from 1 to ‘N’.
Ideally, the array should contain elements from 1 to ‘N’. But due to some miscalculations, there is a number R in the range [1, N] which appears in the array twice and another number M in the range [1, N] which is missing from the array.
Your task is to find the missing number (M) and the repeating number (R).
Sample Input 1:
1 
5
1 3 5 4 4
Sample Output 1:
2 4
****************************

#include <bits/stdc++.h> 

pair<long long int,long long int> missingAndRepeating(vector<int> &arr, long long int n)
{
	// Write your code here 
    pair<long long int,long long int>p;
	long long int sum=(n*(n+1))/2;
    long long int squaresum=(n*(n+1)*((2*n)+1))/6;
    long long int miss,repeat;
    for(int i=0;i<n;i++){
        sum=sum-(long long int)arr[i];
        squaresum=squaresum-(long long int)arr[i]*(long long int)arr[i];
    }
//     miss-repeat=sum;
//     miss+repeat=squaresum/sum;
    miss=(sum+squaresum/sum)/2;
    repeat=miss-sum;
    p={miss,repeat};
    return p;
}
