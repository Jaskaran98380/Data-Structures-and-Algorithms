There are n stones at some integer coordinate points on a 2D plane. Each coordinate point may have at most one stone.

You need to remove some stones. 

A stone can be removed if it shares either the same row or the same column as another stone that has not been removed.

Given an array stones of length n where stones[i] = [xi, yi] represents the location of the ith stone, return the maximum possible number of stones that you can remove.

 

Example 1:

Input:
n=6
[[0 0] ,[ 0 1], [1 0] ,[1 2] ,[2 1] ,[2 2]]

Output:
5

Example:
One way to remove 5 stones are
1--[0,0]
2--[1,0]
3--[0,1]
4--[2,1]
5--[1,2]

Your Task:

You don't need to print or input anything. Complete the function maxRemove() which takes an integer array arr, an integer n as the input parameters and returns an integer, denoting the maximum number of stones that can be removed.

 

Expected Time Complexity: O(N+K)

Expected Space Complexity: O(K)

 

Constraints:

1 <= n <=1000
0 <= x[i], y[i]<= 104
No two stones are at same position.

**************************************

class DisjointSet{
   
    public:
    vector<int>rank,parent,size;
    DisjointSet(int n){
        rank.resize(n+1,0);
        parent.resize(n+1);
        size.resize(n+1);
        for(int i=0;i<=n;i++){
            parent[i]=i;
            size[i]=1;
        }
    }
    int findUParent(int node){
        if(node==parent[node]){
            return node;
        }
        return parent[node]=findUParent(parent[node]);
    } 
    void unionByRank(int u,int v){
        int upU=findUParent(u);
        int upV=findUParent(v);
        if(upU==upV)return;
        if(rank[upU]<rank[upV]){
            parent[upU]=upV;
        }
        else if(rank[upV]<rank[upU]){
            parent[upV]=upU;
        }
        else{
            parent[upV]=upU;
            rank[upU]++;
        }
    }
    void unionBySize(int u,int v){
        int upV=findUParent(v);
        int upU=findUParent(u);
        if(upU==upV)return;
        if(size[upV]<size[upU]){
            parent[upV]=upU;
            size[upU]+=size[upV];
        }
        else{
            parent[upU]=upV;
            size[upV]+=size[upU];
        }
    }
};

class Solution {
public:
    int maxRemove(vector<vector<int>>& stones, int n) {
        // Code here
        int maxRow=0;
        int maxCol=0;
        for(auto it:stones){
            maxRow=max(maxRow,it[0]);
            maxCol=max(maxCol,it[1]);
        }
        DisjointSet ds(maxRow+maxCol+1);
        unordered_map<int,int>mp;
        for(auto it:stones){
            int nodeRow=it[0];
            int nodeCol=it[1]+maxRow+1;
            ds.unionByRank(nodeRow,nodeCol);
            mp[nodeRow]=1;
            mp[nodeCol]=1;
        }
        int cnt=0;
        for(auto it:mp){
            if(ds.findUParent(it.first)==it.first){
                cnt++;
            }
        }
        return n-cnt;
    }
};
