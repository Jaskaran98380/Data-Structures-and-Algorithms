Given a Directed Graph with V vertices (Numbered from 0 to V-1) and E edges, check whether it contains any cycle or not.


Example 1:

Input:



Output: 1
Explanation: 3 -> 3 is a cycle

Example 2:

Input:


Output: 0
Explanation: no cycle in the graph

Your task:
You dont need to read input or print anything. Your task is to complete the function isCyclic() which takes the integer V denoting the number of vertices and adjacency list as input parameters and returns a boolean value denoting if the given directed graph contains a cycle or not.


Expected Time Complexity: O(V + E)
Expected Auxiliary Space: O(V)


Constraints:
1 ≤ V, E ≤ 105

********************************

class Solution {
    
    private:
    bool dfs(int start,bool visited[],bool path[],vector<int>adj[]){
        visited[start]=true;
        path[start]=true;
        for(auto it:adj[start]){
            if(!visited[it]){
                if(dfs(it,visited,path,adj))return true;
            }
            else if(path[it]==true){
                return true;
            }
            
        }
        path[start]=false;
        return false;
    }
  public:
    // Function to detect cycle in a directed graph.
    bool isCyclic(int V, vector<int> adj[]) {
        // code here
        bool visited[V]={false};
        bool path[V]={false};
        for(int i=0;i<V;i++){
            if(!visited[i]){
                if(dfs(i,visited,path,adj))return true;
            }
        }
        return false;
    }
};
