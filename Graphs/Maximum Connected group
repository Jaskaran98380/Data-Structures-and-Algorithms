You are given an n x n binary grid. A grid is said to be binary if every value in grid is either 1 or 0.

You can change at most one cell in grid from 0 to 1.

You need to find the largest group of connected  1's.

Two cells are said to be connected if both are adjacent to each other and both have same value.

Example 1

Input:
2
1 1
0 1

Output:
4

Explanation:
By changing cell (2,1) ,we can obtain a connected group of 4 1's
1 1
1 1
 

Example 2

Input:
3
1 0 1
1 0 1
1 0 1

Output:
7

Explanation:
By changing cell (3,2) ,we can obtain a connected group of 7 1's
1 0 1
1 0 1
1 1 1

Your Task:
You don't need to read or print anything. Your task is to complete the function MaxConnection() which takes an integer n denoting no. of rows and columns of the grid and a matrix grid[][] denoting the grid and return the maximum group of connected group of 1s.

 

Constraints:

1 <= n<= 500
0 <= grid[i][j] <= 1
 
 
 *****************************************
 
 class DisjointSet{
   
    public:
    vector<int>rank,parent,size;
    DisjointSet(int n){
        rank.resize(n+1,0);
        parent.resize(n+1);
        size.resize(n+1);
        for(int i=0;i<=n;i++){
            parent[i]=i;
            size[i]=1;
        }
    }
    int findUParent(int node){
        if(node==parent[node]){
            return node;
        }
        return parent[node]=findUParent(parent[node]);
    } 
    void unionByRank(int u,int v){
        int upU=findUParent(u);
        int upV=findUParent(v);
        if(upU==upV)return;
        if(rank[upU]<rank[upV]){
            parent[upU]=upV;
        }
        else if(rank[upV]<rank[upU]){
            parent[upV]=upU;
        }
        else{
            parent[upV]=upU;
            rank[upU]++;
        }
    }
    void unionBySize(int u,int v){
        int upV=findUParent(v);
        int upU=findUParent(u);
        if(upU==upV)return;
        if(size[upV]<size[upU]){
            parent[upV]=upU;
            size[upU]+=size[upV];
        }
        else{
            parent[upU]=upV;
            size[upV]+=size[upU];
        }
    }
};

class Solution {
  public:
    int MaxConnection(vector<vector<int>>& grid) {
        // code here
           int n=grid.size();
        DisjointSet ds(n*n);
        int dr[]={-1,0,1,0};
        int dc[]={0,1,0,-1};
     
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==1){
                    for(int k=0;k<4;k++){
                        int r=i+dr[k];
                        int c=j+dc[k];
                        if(r>=0 && r<n && c>=0 && c<n && grid[r][c]==1){
                            ds.unionBySize((i*n)+j,(r*n)+c);
                        }
                    }
                }
            }
        }
        int ans=0;
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==1)continue;
                    set<int>components;
                    for(int k=0;k<4;k++){
                        int row=i+dr[k];
                        int col=j+dc[k];
                        if(row>=0 && row<n && col>=0 && col<n && grid[row][col]==1){
                            components.insert(ds.findUParent((row*n)+col));
                        }
                    }
                    int sizeTotal=0;
                    for(auto it:components){
                        sizeTotal+=ds.size[it]; 
                    }
                   ans=max(ans,sizeTotal+1);
                }
            
        }
        for(int i=0;i<n*n;i++){
            ans=max(ans,ds.size[ds.findUParent(i)]);
        }
        return ans;
    }
};
