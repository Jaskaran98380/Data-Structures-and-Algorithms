There is a bi-directional graph with n vertices, where each vertex is labeled from 0 to n - 1 (inclusive). The edges in the graph are represented as a 2D integer array edges, where each edges[i] = [ui, vi] denotes a bi-directional edge between vertex ui and vertex vi. Every vertex pair is connected by at most one edge, and no vertex has an edge to itself.

You want to determine if there is a valid path that exists from vertex source to vertex destination.

Given edges and the integers n, source, and destination, return true if there is a valid path from source to destination, or false otherwise.

 

Example 1:


Input: n = 3, edges = [[0,1],[1,2],[2,0]], source = 0, destination = 2
Output: true
Explanation: There are two paths from vertex 0 to vertex 2:
- 0 → 1 → 2
- 0 → 2
Example 2:


Input: n = 6, edges = [[0,1],[0,2],[3,5],[5,4],[4,3]], source = 0, destination = 5
Output: false
Explanation: There is no path from vertex 0 to vertex 5.
 

Constraints:

1 <= n <= 2 * 105
0 <= edges.length <= 2 * 105
edges[i].length == 2
0 <= ui, vi <= n - 1
ui != vi
0 <= source, destination <= n - 1
There are no duplicate edges.
There are no self edges.

*************************************
//BFS

class Solution {
public:
    bool bfs(vector<int>adj[],bool visited[],int start,int end){
        queue<int>q;
        q.push(start);
        visited[start]=true;
        while(!q.empty()){
            int front=q.front();
            q.pop();
            if(front==end){
                return true;
            }
            for(auto it:adj[front]){
                if(!visited[it]){
                    q.push(it);
                    visited[it]=true;
                }
            }
        }
        return false;
    }
    
    bool validPath(int n, vector<vector<int>>& edges, int source, int destination) {
             if(source>=n || destination>=n){
            return false;
        }
        bool visited[n];
        for(int i=0;i<n;i++){
            visited[i]=false;
        }
        vector<int>adj[n];
        for(int i=0;i<edges.size();i++){
            adj[edges[i][0]].push_back(edges[i][1]);
            adj[edges[i][1]].push_back(edges[i][0]);
        }
        return bfs(adj,visited,source,destination);
   
        
    }
};

***********************************
//DFS
class Solution {
public:
    void dfs(vector<int>adj[],bool visited[],int start,int end){
        visited[start]=true;
          
            for(auto it:adj[start]){
                if(!visited[it]){
                    dfs(adj,visited,it,end);
                }
            }
        }
    
    
    bool validPath(int n, vector<vector<int>>& edges, int source, int destination) {
             if(source>=n || destination>=n){
            return false;
        }
        bool visited[n];
        for(int i=0;i<n;i++){
            visited[i]=false;
        }
        vector<int>adj[n];
        for(int i=0;i<edges.size();i++){
            adj[edges[i][0]].push_back(edges[i][1]);
            adj[edges[i][1]].push_back(edges[i][0]);
        }
        dfs(adj,visited,source,destination);
      return visited[destination];
   
        
    }
};


//another way using dfs only

class Solution {
public:
bool dfs(vector<int>adj[],bool visited[],int start,int end){
          visited[start]=true;
        if(start==end)return true;
         
  
            for(auto it:adj[start]){
                if(!visited[it]){
                    if(dfs(adj,visited,it,end))
                    return true;
                
            }}
        return false;
        }
    
    
    bool validPath(int n, vector<vector<int>>& edges, int source, int destination) {
             if(source>=n || destination>=n){
            return false;
        }
        bool visited[n];
        for(int i=0;i<n;i++){
            visited[i]=false;
        }
        vector<int>adj[n];
        for(int i=0;i<edges.size();i++){
            adj[edges[i][0]].push_back(edges[i][1]);
            adj[edges[i][1]].push_back(edges[i][0]);
        }
       return dfs(adj,visited,source,destination);
      
   
        
    }
};



