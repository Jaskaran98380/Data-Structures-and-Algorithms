There is one meeting room in a firm. There are N meetings in the form of (start[i], end[i]) where start[i] is start time of meeting i and end[i] is finish time of meeting i.
What is the maximum number of meetings that can be accommodated in the meeting room when only one meeting can be held in the meeting room at a particular time?

Note: Start time of one chosen meeting can't be equal to the end time of the other chosen meeting.


Example 1:

Input:
N = 6
start[] = {1,3,0,5,8,5}
end[] =  {2,4,6,7,9,9}
Output: 
4
Explanation:
Maximum four meetings can be held with
given start and end timings.
The meetings are - (1, 2),(3, 4), (5,7) and (8,9)
Example 2:

Input:
N = 3
start[] = {10, 12, 20}
end[] = {20, 25, 30}
Output: 
1
Explanation:
Only one meetings can be held
with given start and end timings.

Your Task :
You don't need to read inputs or print anything. Complete the function maxMeetings() that takes two arrays start[] and end[] along with their size N as input parameters and returns the maximum number of meetings that can be held in the meeting room.


Expected Time Complexity : O(N*LogN)
Expected Auxilliary Space : O(N)


*************************************

//CODE(when just number of meetings is asked)

struct meeting{
    int start;
    int end;

};
class Solution
{
    public:
    //Function to find the maximum number of meetings that can
    //be performed in a meeting room.
    bool static comparator(struct meeting m1,struct meeting m2){
        if(m1.end<m2.end)return true;
        return false;
    }
    
    int maxMeetings(int start[], int end[], int n)
    {
        // Your code here
        struct meeting meet[n];
        int cnt=1;
        for(int i=0;i<n;i++){
            meet[i].start=start[i];
            meet[i].end=end[i];
            
        }
        sort(meet,meet+n,comparator);
        
        int limit=meet[0].end;
        for(int i=1;i<n;i++){
            if(meet[i].start>limit){
                cnt++;
                limit=meet[i].end;
            }
        }
        return cnt;
        
    }
};

**********************************************

Problem Statement
You are given the schedule of N meetings with their start time Start[i] and end time End[i]. But you have only 1 meeting room. So, you need to tell the meeting numbers you can organize in the given room, such that the number of meetings organized is maximum.
Note:
The start time of one chosen meeting canâ€™t be equal to the end time of the other chosen meeting. Also for the same end time, a meeting with a smaller index is preferred. 
Input Format:
The first line contains an integer 'T' denoting the number of test cases or queries to be run. 

The first line of each test case or query contains a single integers 'N' denoting the number of meetings. 

The second line of each test case contains N single space-separated integers denoting the start time of N meetings respectively.

The third line of each test case contains N single space-separated integers denoting the end time of N meetings respectively.
Output Format:
For each test case, print the meeting numbers (Consider 1 based indexing) you organized in the given room, in the order in which you organized them such that the number of meetings is maximum.
Note:
You do not need to print anything, it has already been taken care of. Just implement the given function.
Constraints:
1 <= T <= 5
1 <= N <= 10^5
0 <= Start[i] < End[i] <= 10^9

Time Limit: 1 sec
Sample Input 1:
2
6
1 3 0 5 8 5
2 4 6 7 9 9
3
1 1 1
4 5 9
Sample Output 1:
1 2 4 5
1
Explanation For Sample Input 1:
For test case 1: 
You can organize a maximum of 4 meetings. Meeting number 1 from 1 to 2, Meeting number 2 from 3 to 4, Meeting number 4 from 5 to 7, and Meeting number 5 from 8 to 9.

For test case 2:
As all meetings have the same start time, you can organize only 1 meeting in the room.
Sample Input 2:
2
5
0 7 1 4 8
2 9 5 9 10
3
1 2 3
4 4 4
Sample Output 2:
1 2 
1
***********************************

//CODE(when position of meeting is asked)
#include<bits/stdc++.h>
struct meeting{
    int start;
    int end;
    int pos;
};

bool static comparator(struct meeting m1,struct meeting m2){
        if(m1.end<m2.end)return true;
    else if(m1.end>m2.end)return false;
  else if(m1.pos<m2.pos)return true;
        return false;
    }

vector<int> maximumMeetings(vector<int> &start, vector<int> &end) {
    // Write your code here.
    int n=start.size();
           struct meeting meet[n];
        
        for(int i=0;i<n;i++){
            meet[i].start=start[i];
            meet[i].end=end[i];
            meet[i].pos=i+1;
        }
        sort(meet,meet+n,comparator);
        vector<int>ans;
        int limit=meet[0].end;
        ans.push_back(meet[0].pos);
        for(int i=1;i<n;i++){
            if(meet[i].start>limit){
                
                limit=meet[i].end;
                ans.push_back(meet[i].pos);
            }
        }
        return ans;
}


