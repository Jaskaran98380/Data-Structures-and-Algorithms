Problem Statement
You are given N activities with their start time Start[] and finish time Finish[]. You need to tell the maximum number of activities a single person can perform.
Note:
A person can only work on a single activity at a time. The start time of one activity can coincide with the end time of another.
Input Format:
The first line contains an integer 'T' denoting the number of test cases or queries to be run. 

The first line of each test case or query contains a single integers 'N' denoting the number of activities. 

The second line of each test case contains N single space-separated integers denoting the starting time of N activities respectively.

The third line of each test case contains N single space-separated integers denoting the finishing time of N activities respectively.
Output Format:
For each test case, print the maximum number of activities a single person can perform.
Constraints:
1 <= T <= 5
1 <= N <= (10^5)
0 <= Start[i] < Finish[i] <= (10^9)

Time Limit: 1 sec
Sample Input 1:
2
4
1 6 2 4 
2 7 5 8 
3
1 1 1
4 5 9
Sample Output 1:
3
1
************************************

#include<bits/stdc++.h>

struct activity{
    int st;
    int end;
};
bool static comp(struct activity a,struct activity b){
    return a.end<b.end;
}

int maximumActivities(vector<int> &start, vector<int> &finish) {
    // Write your code here.
    
    int n=start.size();
    int cnt=1;
    struct activity arr[n];
    for(int i=0;i<n;i++){
        arr[i].st=start[i];
        arr[i].end=finish[i];
    }
    sort(arr,arr+n,comp);
    int limit=arr[0].end;
    for(int i=1;i<n;i++){
        if(arr[i].st>=limit){
            cnt++;
            limit=arr[i].end;
        }
    }
    return cnt;
    
}
