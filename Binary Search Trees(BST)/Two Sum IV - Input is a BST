Given the root of a Binary Search Tree and a target number k, return true if there exist two elements in the BST such that their sum is equal to the given target.

 

Example 1:


Input: root = [5,3,6,2,4,null,7], k = 9
Output: true
Example 2:


Input: root = [5,3,6,2,4,null,7], k = 28
Output: false
 

Constraints:

The number of nodes in the tree is in the range [1, 104].
-104 <= Node.val <= 104
root is guaranteed to be a valid binary search tree.
-105 <= k <= 105

********************************************

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class bstIterator{
    private:stack<TreeNode*>st;
    bool reverse=false;
    public:
    
    void pushAll(TreeNode*root){
        while(root){
            if(reverse==true){
                st.push(root);
                root=root->right;
            }
            else{
                st.push(root);
                root=root->left;
            }
        }
    }
    bstIterator(TreeNode*root,bool isReverse){
        reverse=isReverse;
        pushAll(root);
    }
    int next(){
        TreeNode*root=st.top();
        st.pop();
        if(!reverse)pushAll(root->right);
        else{
            pushAll(root->left);
        }
        return root->val;
    }
};

class Solution {
public:
    bool findTarget(TreeNode* root, int k) {
        if(root==NULL)return false;
        bstIterator l(root,false);
        bstIterator r(root,true);
        int i=l.next();
        int j=r.next();
        while(i<j){
        if(i+j==k)return true;
        else if(i+j>k){
            j=r.next();
        }
        else{
            i=l.next();
        }}
        return false;
        
        
    }
};
